version: '3.8'

services:
  # ==================================
  # PostgreSQL Database
  # ==================================
  postgres:
    image: postgres:16-alpine
    container_name: apostolado-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME:-strapi}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-strapi}
      POSTGRES_DB: ${DATABASE_NAME:-apostolado_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups/database:/backups
    ports:
      - "5432:5432"
    networks:
      - apostolado-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME:-strapi}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==================================
  # Strapi Backend
  # ==================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: apostolado-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_CLIENT: postgres
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ${DATABASE_NAME:-apostolado_db}
      DATABASE_USERNAME: ${DATABASE_USERNAME:-strapi}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-strapi}
      DATABASE_SSL: false
      JWT_SECRET: ${JWT_SECRET}
      API_TOKEN_SALT: ${API_TOKEN_SALT}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      TRANSFER_TOKEN_SALT: ${TRANSFER_TOKEN_SALT}
      APP_KEYS: ${APP_KEYS}
    volumes:
      - ./public/uploads:/app/public/uploads
      - ./logs:/app/logs
      - ./backups:/app/backups
    ports:
      - "1337:1337"
    networks:
      - apostolado-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:1337/api/health/live', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ==================================
  # React Frontend
  # ==================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: apostolado-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    networks:
      - apostolado-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ==================================
  # Nginx Reverse Proxy (Optional)
  # ==================================
  # nginx:
  #   image: nginx:alpine
  #   container_name: apostolado-nginx
  #   restart: unless-stopped
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./nginx/ssl:/etc/nginx/ssl
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   networks:
  #     - apostolado-network
  #   depends_on:
  #     - backend
  #     - frontend

  # ==================================
  # Redis Cache (Optional)
  # ==================================
  # redis:
  #   image: redis:7-alpine
  #   container_name: apostolado-redis
  #   restart: unless-stopped
  #   ports:
  #     - "6379:6379"
  #   networks:
  #     - apostolado-network
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

volumes:
  postgres_data:
    driver: local

networks:
  apostolado-network:
    driver: bridge
