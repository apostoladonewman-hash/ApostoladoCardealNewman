name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # ==================================
  # BACKEND TESTS AND BUILD
  # ==================================
  backend:
    name: Backend Build & Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: strapi
          POSTGRES_PASSWORD: strapi
          POSTGRES_DB: strapi_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint || true

      - name: Build backend
        run: npm run build
        env:
          DATABASE_CLIENT: postgres
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_NAME: strapi_test
          DATABASE_USERNAME: strapi
          DATABASE_PASSWORD: strapi
          DATABASE_SSL: false
          JWT_SECRET: test-jwt-secret-key-for-ci
          API_TOKEN_SALT: test-api-token-salt-for-ci
          ADMIN_JWT_SECRET: test-admin-jwt-secret-for-ci
          TRANSFER_TOKEN_SALT: test-transfer-token-salt-for-ci
          APP_KEYS: test-app-key-1,test-app-key-2

      - name: Upload backend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: |
            build/
            node_modules/
          retention-days: 1

  # ==================================
  # FRONTEND TESTS AND BUILD
  # ==================================
  frontend:
    name: Frontend Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run linter
        working-directory: ./frontend
        run: npm run lint || true

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 1

  # ==================================
  # SECURITY SCAN
  # ==================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security audit (backend)
        run: npm audit --audit-level=moderate || true

      - name: Run security audit (frontend)
        working-directory: ./frontend
        run: npm audit --audit-level=moderate || true

  # ==================================
  # DEPLOY TO PRODUCTION
  # ==================================
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend, frontend, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build

      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist

      - name: Deploy to server
        run: |
          echo "ðŸš€ Deployment step"
          echo "Configure this section with your deployment method:"
          echo "- SSH deployment"
          echo "- Docker deployment"
          echo "- Cloud platform (Heroku, Railway, Render, etc.)"

      # Example SSH deployment (uncomment and configure):
      # - name: Deploy via SSH
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.HOST }}
      #     username: ${{ secrets.USERNAME }}
      #     key: ${{ secrets.SSH_KEY }}
      #     script: |
      #       cd /var/www/apostolado
      #       git pull origin main
      #       npm install
      #       npm run build
      #       pm2 reload apostolado

  # ==================================
  # NOTIFY
  # ==================================
  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
      - name: Send notification
        run: |
          echo "âœ… Pipeline completed"
          echo "Status: ${{ job.status }}"
          # Configure notifications (Slack, Discord, Email, etc.)
