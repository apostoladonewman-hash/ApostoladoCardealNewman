# ================================================================
# CI/CD Pipeline - Apostolado Cardeal Newman
# ================================================================

name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # ================================================================
  # 1️⃣ LINT – Validação de qualidade de código
  # ================================================================
  validate:
    name: 🔎 Validar Código (ESLint)
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout do repositório
        uses: actions/checkout@v4

      - name: ⚙️ Configurar Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json' # Cache para ambos os projetos

      - name: 📦 Instalar dependências (Raiz/Backend)
        run: npm ci

      - name: 🚀 Executar ESLint (Raiz/Backend)
        run: npm run lint -- --max-warnings=0

  # ================================================================
  # 2️⃣ BUILD – Backend (Strapi)
  # ================================================================
  build-backend:
    name: 🏗️ Construir Backend (Strapi)
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: ⬇️ Checkout do repositório
        uses: actions/checkout@v4

      - name: ⚙️ Configurar Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: package-lock.json # Cache para o backend na raiz
      
      - name: 🧹 Limpar Cache do npm
        run: npm cache clean --force

      - name: 📦 Instalar dependências
        run: npm ci

      - name: 🛠️ Construir projeto Strapi
        env:
          NODE_ENV: production
          DATABASE_CLIENT: ${{ secrets.DATABASE_CLIENT || 'sqlite' }}
          DATABASE_HOST: ${{ secrets.DATABASE_HOST || '127.0.0.1' }}
          DATABASE_PORT: ${{ secrets.DATABASE_PORT || '5432' }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME || 'strapi' }}
          DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME || 'strapi' }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD || 'strapi' }}
          JWT_SECRET: ${{ secrets.JWT_SECRET || 'test-secret' }}
          ADMIN_JWT_SECRET: ${{ secrets.ADMIN_JWT_SECRET || 'test-admin-secret' }}
          APP_KEYS: ${{ secrets.APP_KEYS || 'test-app-key' }}
        run: npm run build

      - name: 📤 Enviar artefato do Backend
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: |
            build/
            config/
            database/
            src/
            public/
            package.json
            package-lock.json

  # ================================================================
  # 3️⃣ BUILD – Frontend (React + Vite)
  # ================================================================
  build-frontend:
    name: 🎨 Construir Frontend (React)
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: ⬇️ Checkout do repositório
        uses: actions/checkout@v4

      - name: ⚙️ Configurar Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json # Cache específico para o frontend

      - name: 📦 Instalar dependências
        working-directory: ./frontend
        run: npm ci

      - name: 🛠️ Construir projeto
        working-directory: ./frontend
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
        run: npm run build

      - name: 📤 Enviar artefato do Frontend
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

  # ================================================================
  # 4️⃣ Segurança (Trivy)
  # ================================================================
  security-scan:
    name: 🛡️ Scan de Segurança (Trivy)
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    permissions:
      contents: read # para actions/checkout
      security-events: write # para github/codeql-action/upload-sarif
    steps:
      - name: ⬇️ Checkout do repositório
        uses: actions/checkout@v4

      - name: 🧰 Rodar Trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: fs
          ignore-unfixed: true
          format: sarif
          output: trivy-results.sarif
          severity: CRITICAL,HIGH

      - name: 📤 Enviar resultados de segurança
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

  # ================================================================
  # 5️⃣ Deploy – Envio de artefatos e restart no servidor
  # ================================================================
  deploy:
    name: 🚀 Deploy em Produção
    runs-on: ubuntu-latest
    needs: security-scan
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: ⬇️ Baixar artefato do Backend
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: backend-build

      - name: ⬇️ Baixar artefato do Frontend
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend-dist

      - name: 📦 Compactar para envio
        run: |
          tar -czf backend.tar.gz -C backend-build .
          tar -czf frontend.tar.gz -C frontend-dist .

      - name: 🚚 Enviar arquivos ao servidor
        uses: appleboy/scp-action@v0.1.6
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: 'backend.tar.gz,frontend.tar.gz'
          target: '/var/www/apostolado-newman'

      - name: ⚙️ Executar script de deploy remoto
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /var/www/apostolado-newman

            echo "--- Atualizando Backend ---"
            tar -xzf backend.tar.gz
            npm ci --production

            echo "--- Atualizando Frontend ---"
            rm -rf /var/www/html/apostolado-frontend/*
            tar -xzf frontend.tar.gz -C /var/www/html/apostolado-frontend

            echo "--- Reiniciando com PM2 ---"
            pm2 restart apostolado || pm2 start npm --name apostolado -- run start

            echo "--- Deploy finalizado com sucesso! ---"

  # ================================================================
  # 6️⃣ Notificação Final
  # ================================================================
  notify:
    name: 📣 Notificar Status
    runs-on: ubuntu-latest
    needs: [validate, deploy]
    if: always()
    steps:
      - name: 💬 Status do Pipeline
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Pipeline finalizado com sucesso."
          else
            echo "❌ Falha no pipeline: ${{ needs.deploy.result }}"
          fi

